<?xml version="1.0" encoding="UTF-8"?>
<!--
This file was generated by Altova MapForce 2013sp1

YOU SHOULD NOT MODIFY THIS FILE, BECAUSE IT WILL BE
OVERWRITTEN WHEN YOU RE-RUN CODE GENERATION.

Refer to the Altova MapForce Documentation for further details.
http://www.altova.com/mapforce
-->
<xsl:stylesheet version="2.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform" xmlns:ns0="http://mdws.medora.va.gov/EmrSvc" xmlns:user="http://www.altova.com/MapForce/UDF/user" xmlns:vmf="http://www.altova.com/MapForce/UDF/vmf" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:fn="http://www.w3.org/2005/xpath-functions" exclude-result-prefixes="ns0 user vmf xs fn">
	<xsl:template name="user:FMDateToHL7">
		<xsl:param name="FMdate" select="()"/>
		<xsl:variable name="var1_resultof_cast" as="xs:double" select="xs:double(xs:decimal('4'))"/>
		<xsl:sequence select="fn:concat(fn:concat(xs:string((xs:double(fn:substring($FMdate, xs:double(xs:decimal('1')), xs:double(xs:decimal('3')))) + xs:double('1700'))), fn:substring($FMdate, $var1_resultof_cast, $var1_resultof_cast)), fn:substring($FMdate, xs:double(xs:decimal('9')), xs:double(xs:decimal('6'))))"/>
	</xsl:template>
	<xsl:template name="vmf:vmf1_inputtoresult">
		<xsl:param name="input" select="()"/>
		<xsl:choose>
			<xsl:when test="$input='ACTIVE'">
				<xsl:value-of select="'active'"/>
			</xsl:when>
			<xsl:otherwise>
				<xsl:value-of select="'completed'"/>
			</xsl:otherwise>
		</xsl:choose>
	</xsl:template>
	<xsl:output method="xml" encoding="UTF-8" indent="yes"/>
	<xsl:param name="status" as="xs:string?" select="()"/>
	<xsl:template match="/">
		<PrescriptionList xmlns="http://hl7.org/fhir" xmlns:xhtml="http://www.w3.org/1999/xhtml">
			<xsl:attribute name="xsi:schemaLocation" namespace="http://www.w3.org/2001/XMLSchema-instance" select="'http://hl7.org/fhir C:/Users/JERRYG~1/Dropbox/Cognitive/CDS/fhir-all-xsd/cm_prescriptions.xsd'"/>
			<xsl:for-each select="ns0:TaggedTextArray">
				<xsl:variable name="var5_resultof_filter" as="node()*">
					<xsl:for-each select="ns0:results/ns0:TaggedText/ns0:text/ns0:results/ns0:meds/ns0:med">
						<xsl:variable name="var3_resultof_map" as="xs:boolean?">
							<xsl:for-each select="ns0:vaStatus">
								<xsl:variable name="var1_result" as="xs:string">
									<xsl:choose>
										<xsl:when test="fn:exists($status)">
											<xsl:sequence select="$status"/>
										</xsl:when>
										<xsl:otherwise>
											<xsl:sequence select="'active;completed'"/>
										</xsl:otherwise>
									</xsl:choose>
								</xsl:variable>
								<xsl:variable name="var2_resultof_vmf__inputtoresult" as="xs:string">
									<xsl:call-template name="vmf:vmf1_inputtoresult">
										<xsl:with-param name="input" select="fn:string(@value)" as="xs:string"/>
									</xsl:call-template>
								</xsl:variable>
								<xsl:sequence select="fn:contains($var1_result, $var2_resultof_vmf__inputtoresult)"/>
							</xsl:for-each>
						</xsl:variable>
						<xsl:variable name="var4_resultof_any" as="xs:boolean" select="fn:exists($var3_resultof_map[.])"/>
						<xsl:if test="$var4_resultof_any">
							<xsl:sequence select="."/>
						</xsl:if>
					</xsl:for-each>
				</xsl:variable>
				<xsl:for-each select="$var5_resultof_filter">
					<xsl:variable name="var45_cur" as="node()" select="."/>
					<xsl:variable name="var6_resultof_cast" as="xs:string" select="xs:string(xs:anyURI('org.socraticgrid.constants.VAStatus'))"/>
					<xsl:variable name="var7_resultof_cast" as="xs:string" select="xs:string(xs:anyURI('vuid'))"/>
					<xsl:variable name="var8_products" as="node()?" select="ns0:products"/>
					<xsl:variable name="var9_doses" as="node()?" select="ns0:doses"/>
					<xsl:variable name="var10_stop" as="node()?" select="ns0:stop"/>
					<xsl:variable name="var11_facility" as="node()?" select="ns0:facility"/>
					<xsl:variable name="var12_orderingProvider" as="node()?" select="ns0:orderingProvider"/>
					<xsl:variable name="var13_vaStatus" as="node()?" select="ns0:vaStatus"/>
					<Prescription>
						<xsl:for-each select="ns0:id">
							<xsl:attribute name="id" namespace="" select="xs:string(xs:integer(fn:string(@value)))"/>
						</xsl:for-each>
						<contained>
							<Location>
								<name>
									<xsl:for-each select="$var11_facility">
										<xsl:attribute name="id" namespace="" select="xs:string(xs:integer(fn:string(@code)))"/>
									</xsl:for-each>
									<xsl:for-each select="$var11_facility">
										<xsl:variable name="var14_resultof_cast" as="xs:string" select="fn:string(@name)"/>
										<xsl:attribute name="value" namespace="" select="$var14_resultof_cast"/>
									</xsl:for-each>
								</name>
							</Location>
						</contained>
						<identifier>
							<system>
								<xsl:attribute name="value" namespace="" select="xs:string(xs:anyURI('OrderId'))"/>
							</system>
							<id>
								<xsl:for-each select="ns0:orderID">
									<xsl:attribute name="value" namespace="" select="xs:string(xs:integer(fn:string(@value)))"/>
								</xsl:for-each>
							</id>
						</identifier>
						<status>
							<xsl:for-each select="$var13_vaStatus">
								<xsl:attribute name="value" namespace="">
									<xsl:call-template name="vmf:vmf1_inputtoresult">
										<xsl:with-param name="input" select="fn:string(@value)" as="xs:string"/>
									</xsl:call-template>
								</xsl:attribute>
							</xsl:for-each>
							<extension>
								<url>
									<xsl:attribute name="value" namespace="" select="xs:string(xs:anyURI('org.socraticgrid.constant.RecordStatus'))"/>
								</url>
								<valueString>
									<xsl:for-each select="ns0:status">
										<xsl:variable name="var15_resultof_cast" as="xs:string" select="fn:string(@value)"/>
										<xsl:attribute name="value" namespace="" select="$var15_resultof_cast"/>
									</xsl:for-each>
								</valueString>
							</extension>
							<extension>
								<url>
									<xsl:attribute name="value" namespace="" select="$var6_resultof_cast"/>
								</url>
								<valueCoding>
									<system>
										<xsl:attribute name="value" namespace="" select="$var6_resultof_cast"/>
									</system>
									<code>
										<xsl:for-each select="$var13_vaStatus">
											<xsl:attribute name="value" namespace="" select="fn:string(@value)"/>
										</xsl:for-each>
									</code>
								</valueCoding>
							</extension>
						</status>
						<patient>
							<xsl:attribute name="id" namespace="" select="xs:string(xs:decimal('0'))"/>
							<display>
								<xsl:attribute name="value" namespace="" select="'undefined'"/>
							</display>
						</patient>
						<prescriber>
							<display>
								<xsl:for-each select="$var12_orderingProvider">
									<xsl:attribute name="id" namespace="" select="xs:string(xs:integer(fn:string(@code)))"/>
								</xsl:for-each>
								<xsl:for-each select="$var12_orderingProvider">
									<xsl:variable name="var16_resultof_cast" as="xs:string" select="fn:string(@name)"/>
									<xsl:attribute name="value" namespace="" select="$var16_resultof_cast"/>
								</xsl:for-each>
							</display>
						</prescriber>
						<prescribed>
							<xsl:for-each select="ns0:ordered">
								<xsl:variable name="var17_resultof_FMDateToHL_" as="xs:string?">
									<xsl:call-template name="user:FMDateToHL7">
										<xsl:with-param name="FMdate" select="xs:string(xs:decimal(fn:string(@value)))" as="xs:string"/>
									</xsl:call-template>
								</xsl:variable>
								<xsl:if test="fn:exists($var17_resultof_FMDateToHL_)">
									<xsl:attribute name="value" namespace="" select="fn:substring($var17_resultof_FMDateToHL_, xs:double(xs:decimal('1')), xs:double(xs:decimal('8')))"/>
								</xsl:if>
							</xsl:for-each>
						</prescribed>
						<dispense>
							<repeats>
								<xsl:for-each select="ns0:fillsAllowed">
									<xsl:attribute name="value" namespace="" select="xs:string(xs:integer(fn:string(@value)))"/>
								</xsl:for-each>
							</repeats>
							<quantity>
								<value>
									<xsl:for-each select="ns0:quantity">
										<xsl:attribute name="value" namespace="" select="xs:string(xs:integer(fn:string(@value)))"/>
									</xsl:for-each>
								</value>
								<units>
									<xsl:for-each select="ns0:form">
										<xsl:variable name="var18_resultof_cast" as="xs:string" select="fn:string(@value)"/>
										<xsl:attribute name="value" namespace="" select="$var18_resultof_cast"/>
									</xsl:for-each>
								</units>
							</quantity>
						</dispense>
						<medicine>
							<xsl:for-each select="$var8_products">
								<xsl:variable name="var19_resultof_first" as="node()" select="ns0:product/ns0:class"/>
								<extension>
									<url>
										<xsl:attribute name="value" namespace="" select="xs:string(xs:anyURI('org.socraticgrid.constants.drugclass'))"/>
									</url>
									<valueCodeableConcept>
										<coding>
											<system>
												<xsl:attribute name="value" namespace="" select="xs:string(xs:anyURI('drugclass'))"/>
											</system>
											<code>
												<xsl:attribute name="value" namespace="" select="fn:string($var19_resultof_first/@code)"/>
											</code>
										</coding>
										<text>
											<xsl:attribute name="value" namespace="" select="fn:string($var19_resultof_first/@name)"/>
										</text>
									</valueCodeableConcept>
								</extension>
							</xsl:for-each>
							<identification>
								<coding>
									<system>
										<xsl:attribute name="value" namespace="" select="$var7_resultof_cast"/>
									</system>
									<code>
										<xsl:for-each select="$var8_products">
											<xsl:attribute name="value" namespace="" select="xs:string(xs:integer(fn:string(ns0:product/ns0:vaProduct/@vuid)))"/>
										</xsl:for-each>
									</code>
								</coding>
								<text>
									<xsl:for-each select="$var8_products">
										<xsl:attribute name="value" namespace="" select="fn:string(ns0:product/ns0:vaProduct/@name)"/>
									</xsl:for-each>
								</text>
							</identification>
							<activeIngredient>
								<identification>
									<coding>
										<system>
											<xsl:attribute name="value" namespace="" select="$var7_resultof_cast"/>
										</system>
										<code>
											<xsl:for-each select="$var8_products">
												<xsl:attribute name="value" namespace="" select="xs:string(xs:integer(fn:string(ns0:product/ns0:vaGeneric/@vuid)))"/>
											</xsl:for-each>
										</code>
									</coding>
									<text>
										<xsl:for-each select="$var8_products">
											<xsl:attribute name="value" namespace="" select="fn:string(ns0:product/ns0:vaGeneric/@name)"/>
										</xsl:for-each>
									</text>
								</identification>
							</activeIngredient>
						</medicine>
						<administrationRequest>
							<description>
								<xsl:for-each select="ns0:sig">
									<xsl:attribute name="value" namespace="" select="fn:string(.)"/>
								</xsl:for-each>
							</description>
							<start>
								<xsl:for-each select="ns0:start">
									<xsl:variable name="var20_resultof_cast" as="xs:string" select="fn:string(@value)"/>
									<xsl:variable name="var21_resultof_FMDateToHL_" as="xs:string?">
										<xsl:call-template name="user:FMDateToHL7">
											<xsl:with-param name="FMdate" select="$var20_resultof_cast" as="xs:string"/>
										</xsl:call-template>
									</xsl:variable>
									<xsl:if test="fn:exists($var21_resultof_FMDateToHL_)">
										<xsl:attribute name="value" namespace="" select="$var21_resultof_FMDateToHL_"/>
									</xsl:if>
								</xsl:for-each>
							</start>
							<end>
								<xsl:for-each select="$var10_stop">
									<xsl:variable name="var22_resultof_cast" as="xs:string" select="fn:string(@value)"/>
									<xsl:variable name="var23_resultof_FMDateToHL_" as="xs:string?">
										<xsl:call-template name="user:FMDateToHL7">
											<xsl:with-param name="FMdate" select="$var22_resultof_cast" as="xs:string"/>
										</xsl:call-template>
									</xsl:variable>
									<xsl:if test="fn:exists($var23_resultof_FMDateToHL_)">
										<xsl:attribute name="value" namespace="" select="$var23_resultof_FMDateToHL_"/>
									</xsl:if>
								</xsl:for-each>
							</end>
							<dosageInstruction>
								<route>
									<text>
										<xsl:for-each select="$var9_doses">
											<xsl:attribute name="value" namespace="" select="fn:string(ns0:dose/@route)"/>
										</xsl:for-each>
									</text>
								</route>
								<doseQuantity>
									<xsl:variable name="var27_resultof_filter" as="node()?">
										<xsl:for-each select="$var9_doses">
											<xsl:variable name="var24_resultof_cast" as="xs:string" select="fn:string(ns0:dose/@dose)"/>
											<xsl:variable name="var26_result" as="xs:boolean">
												<xsl:choose>
													<xsl:when test="fn:contains($var24_resultof_cast, ' ')">
														<xsl:variable name="var25_resultof_index_map" as="xs:boolean*">
															<xsl:for-each select="tokenize($var24_resultof_cast, replace(' ', '(\.|\$|\^|\{|\[|\(|\||\)|\*|\+|\?|\\)', '\\$1'))">
																<xsl:sequence select="(xs:decimal('1') = position())"/>
															</xsl:for-each>
														</xsl:variable>
														<xsl:sequence select="fn:exists($var25_resultof_index_map[.])"/>
													</xsl:when>
													<xsl:otherwise>
														<xsl:sequence select="fn:true()"/>
													</xsl:otherwise>
												</xsl:choose>
											</xsl:variable>
											<xsl:if test="$var26_result">
												<xsl:sequence select="."/>
											</xsl:if>
										</xsl:for-each>
									</xsl:variable>
									<value>
										<xsl:for-each select="$var27_resultof_filter">
											<xsl:variable name="var28_resultof_first" as="node()" select="ns0:dose/@dose"/>
											<xsl:variable name="var29_resultof_cast" as="xs:string" select="fn:string($var28_resultof_first)"/>
											<xsl:variable name="var31_result" as="xs:string">
												<xsl:choose>
													<xsl:when test="fn:contains($var29_resultof_cast, ' ')">
														<xsl:variable name="var30_resultof_index_map" as="xs:string*">
															<xsl:for-each select="tokenize($var29_resultof_cast, replace(' ', '(\.|\$|\^|\{|\[|\(|\||\)|\*|\+|\?|\\)', '\\$1'))">
																<xsl:if test="(xs:decimal('1') = position())">
																	<xsl:sequence select="."/>
																</xsl:if>
															</xsl:for-each>
														</xsl:variable>
														<xsl:sequence select="xs:string(fn:string-join(for $x in $var30_resultof_index_map return xs:string($x), ' '))"/>
													</xsl:when>
													<xsl:otherwise>
														<xsl:sequence select="$var29_resultof_cast"/>
													</xsl:otherwise>
												</xsl:choose>
											</xsl:variable>
											<xsl:attribute name="value" namespace="" select="xs:string(xs:decimal($var31_result))"/>
										</xsl:for-each>
									</value>
									<xsl:variable name="var35_resultof_filter" as="node()?">
										<xsl:for-each select="$var9_doses">
											<xsl:variable name="var32_resultof_cast" as="xs:string" select="fn:string(ns0:dose/@dose)"/>
											<xsl:variable name="var34_result" as="xs:boolean">
												<xsl:choose>
													<xsl:when test="fn:contains($var32_resultof_cast, ' ')">
														<xsl:variable name="var33_resultof_index_map" as="xs:boolean*">
															<xsl:for-each select="tokenize($var32_resultof_cast, replace(' ', '(\.|\$|\^|\{|\[|\(|\||\)|\*|\+|\?|\\)', '\\$1'))">
																<xsl:sequence select="fn:not((xs:decimal('1') = position()))"/>
															</xsl:for-each>
														</xsl:variable>
														<xsl:sequence select="fn:exists($var33_resultof_index_map[.])"/>
													</xsl:when>
													<xsl:otherwise>
														<xsl:sequence select="fn:true()"/>
													</xsl:otherwise>
												</xsl:choose>
											</xsl:variable>
											<xsl:if test="$var34_result">
												<xsl:sequence select="."/>
											</xsl:if>
										</xsl:for-each>
									</xsl:variable>
									<units>
										<xsl:for-each select="$var35_resultof_filter">
											<xsl:variable name="var36_resultof_first" as="node()" select="ns0:dose"/>
											<xsl:variable name="var37_resultof_cast" as="xs:string" select="fn:string($var36_resultof_first/@dose)"/>
											<xsl:attribute name="value" namespace="">
												<xsl:choose>
													<xsl:when test="fn:contains($var37_resultof_cast, ' ')">
														<xsl:variable name="var38_resultof_index_map" as="xs:string*">
															<xsl:for-each select="tokenize($var37_resultof_cast, replace(' ', '(\.|\$|\^|\{|\[|\(|\||\)|\*|\+|\?|\\)', '\\$1'))">
																<xsl:if test="fn:not((xs:decimal('1') = position()))">
																	<xsl:sequence select="."/>
																</xsl:if>
															</xsl:for-each>
														</xsl:variable>
														<xsl:sequence select="xs:string(fn:string-join(for $x in $var38_resultof_index_map return xs:string($x), ' '))"/>
													</xsl:when>
													<xsl:otherwise>
														<xsl:sequence select="fn:string($var36_resultof_first/@units)"/>
													</xsl:otherwise>
												</xsl:choose>
											</xsl:attribute>
										</xsl:for-each>
									</units>
								</doseQuantity>
								<schedule>
									<extension>
										<url>
											<xsl:attribute name="value" namespace="" select="xs:string(xs:anyURI('org.socraticgrid.constants.VASchedule'))"/>
										</url>
										<valueString>
											<xsl:for-each select="$var9_doses">
												<xsl:attribute name="value" namespace="" select="fn:string(ns0:dose/@schedule)"/>
											</xsl:for-each>
										</valueString>
									</extension>
									<repeat>
										<duration>
											<xsl:for-each select="$var10_stop">
												<xsl:variable name="var40_resultof_FMDateToHL_" as="xs:string?">
													<xsl:call-template name="user:FMDateToHL7">
														<xsl:with-param name="FMdate" select="fn:string(@value)" as="xs:string"/>
													</xsl:call-template>
												</xsl:variable>
												<xsl:if test="fn:exists($var40_resultof_FMDateToHL_)">
													<xsl:for-each select="$var45_cur/ns0:start">
														<xsl:variable name="var39_resultof_FMDateToHL_" as="xs:string?">
															<xsl:call-template name="user:FMDateToHL7">
																<xsl:with-param name="FMdate" select="fn:string(@value)" as="xs:string"/>
															</xsl:call-template>
														</xsl:variable>
														<xsl:if test="fn:exists($var39_resultof_FMDateToHL_)">
															<xsl:attribute name="value" namespace="" select="xs:string(fn:days-from-duration((xs:date(fn:concat(fn:concat(fn:concat(fn:concat(fn:substring($var40_resultof_FMDateToHL_, xs:double(xs:decimal('1')), xs:double(xs:decimal('4'))), '-'), fn:substring($var40_resultof_FMDateToHL_, xs:double(xs:decimal('5')), xs:double(xs:decimal('2')))), '-'), fn:substring($var40_resultof_FMDateToHL_, xs:double(xs:decimal('7')), xs:double(xs:decimal('2'))))) - xs:date(fn:concat(fn:concat(fn:concat(fn:concat(fn:substring($var39_resultof_FMDateToHL_, xs:double(xs:decimal('1')), xs:double(xs:decimal('4'))), '-'), fn:substring($var39_resultof_FMDateToHL_, xs:double(xs:decimal('5')), xs:double(xs:decimal('2')))), '-'), fn:substring($var39_resultof_FMDateToHL_, xs:double(xs:decimal('7')), xs:double(xs:decimal('2'))))))))"/>
														</xsl:if>
													</xsl:for-each>
												</xsl:if>
											</xsl:for-each>
										</duration>
										<xsl:variable name="var44_resultof_map" as="xs:boolean?">
											<xsl:for-each select="$var10_stop">
												<xsl:variable name="var42_resultof_FMDateToHL_" as="xs:string?">
													<xsl:call-template name="user:FMDateToHL7">
														<xsl:with-param name="FMdate" select="fn:string(@value)" as="xs:string"/>
													</xsl:call-template>
												</xsl:variable>
												<xsl:variable name="var43_result" as="xs:boolean?">
													<xsl:if test="fn:exists($var42_resultof_FMDateToHL_)">
														<xsl:for-each select="$var45_cur/ns0:start">
															<xsl:variable name="var41_resultof_FMDateToHL_" as="xs:string?">
																<xsl:call-template name="user:FMDateToHL7">
																	<xsl:with-param name="FMdate" select="fn:string(@value)" as="xs:string"/>
																</xsl:call-template>
															</xsl:variable>
															<xsl:if test="fn:exists($var41_resultof_FMDateToHL_)">
																<xsl:if test="(fn:days-from-duration((xs:date(fn:concat(fn:concat(fn:concat(fn:concat(fn:substring($var42_resultof_FMDateToHL_, xs:double(xs:decimal('1')), xs:double(xs:decimal('4'))), '-'), fn:substring($var42_resultof_FMDateToHL_, xs:double(xs:decimal('5')), xs:double(xs:decimal('2')))), '-'), fn:substring($var42_resultof_FMDateToHL_, xs:double(xs:decimal('7')), xs:double(xs:decimal('2'))))) - xs:date(fn:concat(fn:concat(fn:concat(fn:concat(fn:substring($var41_resultof_FMDateToHL_, xs:double(xs:decimal('1')), xs:double(xs:decimal('4'))), '-'), fn:substring($var41_resultof_FMDateToHL_, xs:double(xs:decimal('5')), xs:double(xs:decimal('2')))), '-'), fn:substring($var41_resultof_FMDateToHL_, xs:double(xs:decimal('7')), xs:double(xs:decimal('2'))))))) &gt; xs:decimal('0'))">
																	<xsl:sequence select="fn:true()"/>
																</xsl:if>
															</xsl:if>
														</xsl:for-each>
													</xsl:if>
												</xsl:variable>
												<xsl:sequence select="fn:exists($var43_result)"/>
											</xsl:for-each>
										</xsl:variable>
										<units>
											<xsl:if test="fn:exists($var44_resultof_map[.])">
												<xsl:attribute name="value" namespace="" select="'days'"/>
											</xsl:if>
										</units>
									</repeat>
								</schedule>
							</dosageInstruction>
						</administrationRequest>
					</Prescription>
				</xsl:for-each>
			</xsl:for-each>
		</PrescriptionList>
	</xsl:template>
</xsl:stylesheet>
